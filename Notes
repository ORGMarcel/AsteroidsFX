Notes for the project.

Achieving stable interfaces is still a challenge in CBSE because it's difficult to cover a larger basis of principles for further implementation.

For a contract, an interface isn't enough. Pre- and post conditions also need to be defined.

Clean architecture.

Layered component based architecture
- Improve maintainability
- Each business component consists of a necessary business object and a DAO for persistence
- Further partitioning of 3-layered architecture.

Dependency injection and Service locator model are two different ways to code around glue code classes.

Design pattern, factory pattern.

SOLID principperne.

S - Single responsibility
O - Open to extension, closed to modification
L - Liskov Substitution
I - Interface segregation
D - Dependency inversion


JAR HELL - Multiple versions of the JARs lying on the classpath resulting in ClassLoader loading the first found class form the JAR, with unexpected results.
How to solve Jar hell: Prohibit having two modules containing classes with the same name,


Split packages, if you were to not utilize moduluar/modulsystem programming. This is when classes in different modules have the same name.

Jigsaw layers
- Local module system
- Split packages are prohibited inside one layer
- Two modules containing the same package have to beling to different layers.
Jigsaw layers are implemented via classloaders. Each layer has at least one unique classloader. However, classloader constraints are impossible to violate by construction.


JPMS = Java Platform Module system

To avoid split packages, each module is loaded by its own classloader. This means there'll no conflicts between classes in different modules.

getClassloader()==null

Inversion of control, IOC is a design principle that allows dependencies to be transferred through services.

Service provided interfaces, the interfaces only have one responsibility.

Modularity provides: Smaller footprint, better encapsulation, follows SOLID principles and separation of concerns.
Some of the same principles of microservices.






